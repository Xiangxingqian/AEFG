package com.app.test.newMethod;

import java.util.List;

import soot.BooleanType;
import soot.Local;
import soot.Modifier;
import soot.RefType;
import soot.Scene;
import soot.SootClass;
import soot.SootMethod;
import soot.Trap;
import soot.Type;
import soot.VoidType;
import soot.jimple.AssignStmt;
import soot.jimple.IdentityStmt;
import soot.jimple.IntConstant;
import soot.jimple.Jimple;
import soot.jimple.NullConstant;
import soot.jimple.ParameterRef;
import soot.jimple.ReturnVoidStmt;
import soot.jimple.StringConstant;
import soot.jimple.ThisRef;

import com.app.test.MethodBuilder;

public class DoReflect extends MethodBuilder{

	public static final String CLASSNAME = "doReflect";
	public static final String SUBSIGNATURE = "void doReflect(android.view.View,java.lang.Object)";
	public DoReflect(SootClass sc, String subSignature) {
		super(sc, subSignature);
	}

	@Override
	protected void addUnits() {
		Local currentActivity,view,context,object1,object2,exception,field1,field2,field3,
		string,classLocal,linkedList1,linkedList2,flag,booleanLocal;
		{
			currentActivity = addLocal("activity", sc_Type);
			object1 = addLocal("object1", object_Type);
			object2 = addLocal("object2", object_Type);
			view = addLocal("view", view_Type);
			flag = addLocal("flag", BooleanType.v());
			classLocal = addLocal("classLocal", class_Type);
			linkedList1 = addLocal("linkedList1", linkedList_Type);
			linkedList2 = addLocal("linkedList2", linkedList_Type);
			string = addLocal("string", string_Type);
			exception = addLocal("exception", exception_Type);
			field1 =  addLocal("field1", field_Type);
			field2 =  addLocal("field2", field_Type);
			field3 =  addLocal("field3", field_Type);
			booleanLocal =  addLocal("booleanLocal", boolean_Type);
			context =  addLocal("context", context_Type);
		}
		
		addIdentityStmt(currentActivity, new ThisRef(sc_Type));
		addIdentityStmt(view, new ParameterRef(view_Type,0));
		addIdentityStmt(object1, new ParameterRef(object_Type,1));
		addAssignStmt(context,Jimple.v().newVirtualInvokeExpr(view,getContext_method.makeRef()));
		addAssignStmt(classLocal,Jimple.v().newVirtualInvokeExpr(context,getClass_method.makeRef()));
		addAssignStmt(string,Jimple.v().newVirtualInvokeExpr(classLocal,classGetName_method.makeRef()));

		//label0,
		AssignStmt label0 = Jimple.v().newAssignStmt(classLocal, Jimple.v().newStaticInvokeExpr(forName_method.makeRef(),string));
		//label1, 
		ReturnVoidStmt label1 = Jimple.v().newReturnVoidStmt();
		//label2, 
		IdentityStmt label2 = Jimple.v().newIdentityStmt(exception, Jimple.v().newCaughtExceptionRef());
	
		body.getUnits().add(label0);
		addAssignStmt(field1,Jimple.v().newVirtualInvokeExpr(classLocal,getField_method.makeRef(),StringConstant.v("viewLinkedList")));
		addAssignStmt(classLocal,Jimple.v().newStaticInvokeExpr(forName_method.makeRef(),string));
		addAssignStmt(field2,Jimple.v().newVirtualInvokeExpr(classLocal,getField_method.makeRef(),StringConstant.v("listenerLinkedList")));
		addAssignStmt(classLocal,Jimple.v().newStaticInvokeExpr(forName_method.makeRef(),string));
		addAssignStmt(field3,Jimple.v().newVirtualInvokeExpr(classLocal,getField_method.makeRef(),StringConstant.v("isMyEvent")));
		addAssignStmt(object2,Jimple.v().newVirtualInvokeExpr(field1,fieldGet_method.makeRef(),NullConstant.v()));
		addAssignStmt(linkedList1,Jimple.v().newCastExpr(object2, linkedList_Type));
		addAssignStmt(object2,Jimple.v().newVirtualInvokeExpr(field2,fieldGet_method.makeRef(),NullConstant.v()));
		addAssignStmt(linkedList2,Jimple.v().newCastExpr(object2, linkedList_Type));
		addAssignStmt(object2,Jimple.v().newVirtualInvokeExpr(field3,fieldGet_method.makeRef(),NullConstant.v()));
		addAssignStmt(booleanLocal,Jimple.v().newCastExpr(object2,boolean_Type));
		addAssignStmt(flag,Jimple.v().newVirtualInvokeExpr(booleanLocal,booleanValue_method.makeRef()));
		addIfStmt(Jimple.v().newEqExpr(flag, IntConstant.v(0)), label1);
		addInvokeStmt(Jimple.v().newVirtualInvokeExpr(linkedList1,offer_method.makeRef(),view));
		addInvokeStmt(Jimple.v().newVirtualInvokeExpr(linkedList2,offer_method.makeRef(),object1));
		
		body.getUnits().add(label1);
		
		body.getUnits().add(label2);
		addInvokeStmt(Jimple.v().newVirtualInvokeExpr(exception,printStackTrace_method.makeRef()));
		addGotoStmt(label1);
		Trap trap = Jimple.v().newTrap(Scene.v().getSootClass("java.lang.Exception"), label0, label1, label2);
		body.getTraps().add(trap);
	}

	@Override
	protected void newMethodName() {
		List<Type> emptyTypes = paramTypes();
		emptyTypes.add(view_Type);
		emptyTypes.add(object_Type);
		currentMethod = new SootMethod(CLASSNAME, emptyTypes, VoidType.v(),Modifier.PUBLIC);
	}
}
