public class com.example.qian.TestThread extends java.lang.Thread
{
    java.lang.Object o;

    public void <init>(java.lang.Object)
    {
        com.example.qian.TestThread base;
        java.lang.Object o;

        base := @this: com.example.qian.TestThread;
        o := @parameter0: java.lang.Object;
        specialinvoke base.<java.lang.Thread: void <init>()>();
        base.<com.example.qian.TestThread: java.lang.Object o> = o;
        return;
    }

    public void run()
    {
        com.example.qian.TestThread base;
        java.lang.Class classLocal;
        java.lang.Exception exception;
        java.lang.reflect.Field field;
        java.lang.reflect.Method reflectMethod;
        java.lang.Object object;
        java.lang.Boolean booleanLocal;

        base := @this: com.example.qian.TestThread;

     label0:
        staticinvoke <java.lang.Thread: void sleep(long)>(4000L);
        object = base.<com.example.qian.TestThread: java.lang.Object o>;
        classLocal = virtualinvoke object.<java.lang.Object: java.lang.Class getClass()>();
        reflectMethod = virtualinvoke classLocal.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("doTest", null);
        field = virtualinvoke classLocal.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("isMyEvent");
        booleanLocal = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);
        virtualinvoke field.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(null, booleanLocal);
        object = base.<com.example.qian.TestThread: java.lang.Object o>;
        virtualinvoke reflectMethod.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(object, null);

     label1:
        return;

     label2:
        exception := @caughtexception;
        virtualinvoke exception.<java.lang.Throwable: void printStackTrace()>();
        goto label1;

        catch java.lang.Exception from label0 to label1 with label2;
    }
}
