package com.app.test;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.app.test.modifyClass.ModifiedTag;
import com.app.test.newMethod.OnCreateOptionsMenu;
import com.app.test.newMethod.OnMenuItemClick;

import entry.Entry;

import soot.Body;
import soot.BodyTransformer;
import soot.IntType;
import soot.Local;
import soot.Modifier;
import soot.NullType;
import soot.PackManager;
import soot.PatchingChain;
import soot.RefType;
import soot.Scene;
import soot.SootClass;
import soot.SootField;
import soot.SootMethod;
import soot.Transform;
import soot.Type;
import soot.Unit;
import soot.Value;
import soot.VoidType;
import soot.jimple.AbstractStmtSwitch;
import soot.jimple.ClassConstant;
import soot.jimple.Constant;
import soot.jimple.InvokeExpr;
import soot.jimple.InvokeStmt;
import soot.jimple.Jimple;
import soot.jimple.internal.JNewExpr;
import soot.options.Options;

public class AndroidInstrument {
	
	//public List<SootClass> unresolvedClasses = new ArrayList<SootClass>();
	
//	public AndroidInstrument(List<SootClass> unresolvedClasses) {
//		super();
//		//this.unresolvedClasses = unresolvedClasses;
//	}

	public void instrument(String[] args){
		initSoot(args);
        transform(args);
	}
	
	public void initSoot(String[] args){
		Options.v().set_soot_classpath(
				"/lib/jce.jar;" +
				"/lib/tools.jar;" +
				"lib/android.jar;"+
				"/lib/android-support-v4.jar;"
				);	
		Options.v().set_android_jars(args[1]);
		Options.v().set_src_prec(Options.src_prec_apk);
		Options.v().set_output_format(Options.output_format_dex);
		
        // resolve the PrintStream and System soot-classes
		Scene.v().addBasicClass("java.io.PrintStream",SootClass.SIGNATURES);
        Scene.v().addBasicClass("java.lang.System",SootClass.SIGNATURES);
        Scene.v().addBasicClass("java.util.LinkedList",SootClass.SIGNATURES);
        Scene.v().addBasicClass("java.lang.reflect.Field",SootClass.SIGNATURES);
        Scene.v().addBasicClass("java.lang.Class",SootClass.SIGNATURES);
        Scene.v().addBasicClass("java.lang.Boolean",SootClass.SIGNATURES);
        Scene.v().addBasicClass("java.lang.Exception",SootClass.SIGNATURES);
        Scene.v().addBasicClass("android.widget.Toast",SootClass.SIGNATURES);
        Scene.v().loadNecessaryClasses();
        
        
        //Scene.v().addBasicClass("android.net.Uri",SootClass.SIGNATURES);
        //Scene.v().addBasicClass("android.content.Intent",SootClass.SIGNATURES);
       
	}
	
	public void transform(String[] args){
		PackManager.v().getPack("jtp").add(new Transform("jtp.myInstrumenter", new BodyTransformer() {
			@Override
			protected void internalTransform(final Body b, String phaseName, @SuppressWarnings("rawtypes") Map options) {
				
				SootMethod method = b.getMethod();
				SootClass sc = method.getDeclaringClass();
				String name = sc.getName();
				
				//if b is method of Java, Android, Org, return
				if(name.startsWith("android")||name.startsWith("java")||name.startsWith("org")){
					return;
				}
				
				//if b is method of activity, add map<view, List<Listener>>
				if(Entry.getActivities().contains(name)){
					
					//add tag
					if(sc.hasTag(ModifiedTag.Modified)){
						return;
					}
					sc.addTag(new ModifiedTag());
					
					//add fields
					addEventAndEventHandlerField(sc);
					addCountField(sc);
					addActivitiesField(sc);
					
					//add methods
					if(!sc.declaresMethod("void <clinit>()"))
						addClinitMethod(sc);
					else {
						modifyMethod(sc,sc.getMethod("void <clinit>()"));
					}
					
					if(!sc.declaresMethod(Constants.Strings.onCreateOptionsMenu_Name))
						addOnCreateOptionsMenuMethod(sc);
					else
						modifyMethod(sc,sc.getMethod(Constants.Strings.onCreateOptionsMenu_Name));
					
					if(!sc.declaresMethod(Constants.Strings.onMenuItemClick_Name))
						addOnMenuItemClickMethod(sc);
				}
				
				//start to insert units
				final PatchingChain<Unit> units = b.getUnits();
				for(Iterator<Unit> iter = units.snapshotIterator(); iter.hasNext();) {
					final Unit u = iter.next();
					u.apply(new AbstractStmtSwitch() {
						public void caseInvokeStmt(InvokeStmt stmt) {
							InvokeExpr invokeExpr = stmt.getInvokeExpr();
							if(invokeExpr.getMethod().getName().equals("setOnClickListener")) {
								insertUnits(invokeExpr,b,u);
								b.validate();
								
//						        SootClass e = DoTesting.eventClass;
//								
//						        Local view = (Local)invokeExpr.getUseBoxes().get(0).getValue();
//								Local listener = (Local)invokeExpr.getArg(0);
//								Local contextClass = addLocal(b, "contextClass", RefType.v("java.lang.Class"));
//								Local eventsList = addLocal(b, "eventsList", RefType.v("java.util.List"));
//								Local eventLocal = addLocal(b, "eventLocal", RefType.v("com.qian.Event"));
//								//G.v().out.println(Scene.v().containsClass("com.qian.Event"));
//								//SootMethod init_event = Scene.v().getMethod("<com.qian.Event: void <init>(java.lang.Class,android.view.View,java.lang.Object)>");
//								SootMethod init_event = e.getMethodByName("<init>");
//								
//								SootMethod listAdd = Scene.v().getMethod("<java.util.List: boolean add(java.lang.Object)>");
//								//SootClass sc = Scene.v().getSootClass("com.qian.Event");
//								SootField sootField = e.getFieldByName("events");
//								
//								units.insertBefore(Jimple.v().newAssignStmt(contextClass,ClassConstant.v("java/lang/String")),u);
//								List<Value> parameters = new ArrayList<Value>();
//								parameters.add(contextClass);
//								parameters.add(view);
//								parameters.add(listener);
//								units.insertBefore(Jimple.v().newAssignStmt(eventLocal, new JNewExpr(RefType.v("com.qian.Event"))), u);
//								units.insertBefore(Jimple.v().newInvokeStmt(
//										Jimple.v().newSpecialInvokeExpr(eventLocal, init_event.makeRef(),parameters)), u);
//								units.insertBefore(Jimple.v().newAssignStmt(
//										eventsList,Jimple.v().newStaticFieldRef(sootField.makeRef())),u);
//								units.insertBefore(Jimple.v().newInvokeStmt(
//										Jimple.v().newInterfaceInvokeExpr(eventsList, listAdd.makeRef())), u);
//								units.insertBefore(Jimple.v().newAssignStmt( 
//										Jimple.v().newStaticFieldRef(sootField.makeRef()),eventsList),u);
//								b.validate();
//						        if(method.getDeclaringClass().isInterface()){
//									units.insertBefore(Jimple.v().newInvokeStmt(
//											Jimple.v().newInterfaceInvokeExpr(listener, method.makeRef(), view)), u);
//								}
//								else 
//									units.insertBefore(Jimple.v().newInvokeStmt(
//						                      Jimple.v().newVirtualInvokeExpr(listener, method.makeRef(), view)), u);
						        
						        //check that we did not mess up the Jimple
//						        
							}
							else if(invokeExpr.getMethod().getName().equals("startActivity")){
//								Local local = (Local)invokeExpr.getArg(0);
//								Local uriLocal = addTmpUri(b);
//								SootClass sootClass = ((RefType)local.getType()).getSootClass();
//								SootMethod initMethod = sootClass.getMethod("void <init>()");
//								SootMethod setAction = sootClass.getMethod("android.content.Intent setAction(java.lang.String)");
//								SootMethod setData = sootClass.getMethod("android.content.Intent setData(android.net.Uri)");
//								
//								SootClass sc = Scene.v().getSootClass("android.net.Uri");
//								SootMethod parse = sc.getMethod("android.net.Uri parse(java.lang.String)");
//								
//								StringConstant uriString = StringConstant.v("http://www.cnblogs.com/xiangxing");
//								StringConstant actionString = StringConstant.v("android.intent.action.VIEW");
//								
//								//$r2 = new android.content.Intent;
//								NewExpr newNewExpr = Jimple.v().newNewExpr((RefType)local.getType());
//								units.insertBefore(Jimple.v().newAssignStmt(local, newNewExpr),u);
//								
//								//specialinvoke $r2.<android.content.Intent: void <init>()>();
//								units.insertBefore(Jimple.v().newInvokeStmt(
//										Jimple.v().newSpecialInvokeExpr(local, initMethod.makeRef())),u);
//								
//								//tmpUri = Uri.parse("http://www.cnblogs.com/xiangxing");
//								units.insertBefore(Jimple.v().newAssignStmt(uriLocal, 
//										Jimple.v().newStaticInvokeExpr(parse.makeRef(), uriString)),u);
//								
//								//virtualinvoke $r2.<android.content.Intent: android.content.Intent setAction(java.lang.String)>("android.intent.action.VIEW");
//								units.insertBefore(Jimple.v().newInvokeStmt(
//										Jimple.v().newVirtualInvokeExpr(local, setAction.makeRef(),actionString)),u);
//								
//								//virtualinvoke $r2.<android.content.Intent: android.content.Intent setData(android.net.Uri)>(tmpUri);
//								units.insertBefore(Jimple.v().newInvokeStmt(
//										Jimple.v().newVirtualInvokeExpr(local, setData.makeRef(),uriLocal)),u);
//								b.validate();
							}
						}

						
					});
				}
			}
		}));
		soot.Main.main(args);
	}
	
	//addUnits
	private void insertUnits(InvokeExpr invokeExpr, Body b, Unit u) {
		// TODO Auto-generated method stub
		
	}
	
	//addFields
	private SootField addEventAndEventHandlerField(SootClass sc) {
		SootField sootField = new SootField(Constants.Strings.eventToEventHanlder_Name, RefType.v("java.util.Map"), Modifier.PUBLIC|Modifier.STATIC);
		sc.getFields().add(sootField);
		return sootField;
	}
	
	private SootField addCountField(SootClass sc){
		SootField count_field = new SootField("count", IntType.v(), Modifier.PUBLIC|Modifier.STATIC);
		sc.getFields().add(count_field);
		return count_field;
	}
	
	private SootField addActivitiesField(SootClass sc){
		SootField activities_field = new SootField("activities", RefType.v("java.util.List"), Modifier.PUBLIC|Modifier.STATIC);
		sc.getFields().add(activities_field);
		return activities_field;
	}
	
	//addMethods
	private SootMethod addClinitMethod(SootClass sc) {
		return new ClinitMethod(sc, "void <clinit>()").newMethod();
	}
	
	private SootMethod addOnCreateOptionsMenuMethod(SootClass sc){
		OnCreateOptionsMenu optionMenu = new OnCreateOptionsMenu(sc, Constants.Strings.onCreateOptionsMenu_Name);
		return optionMenu.newMethod();
	}
	
	private SootMethod addOnMenuItemClickMethod(SootClass sc){
		OnMenuItemClick onMenuItemClick = new OnMenuItemClick(sc, Constants.Strings.onMenuItemClick_Name);
		return onMenuItemClick.newMethod();
	}
	
	private void modifyMethod(SootClass sc, SootMethod method) {
		// TODO Auto-generated method stub
		
	}
	
	//addLocals
	private Local addLocal(Body b, String name, Type t){
		Local context = Jimple.v().newLocal(name, t);
		b.getLocals().add(context);
		return context;
	}
	
	//inner classes
	class ClinitMethod extends MethodBuilder{
		//add 
		
		Local arrayList;
		public ClinitMethod(SootClass sc, String subSignature) {
			super(sc, subSignature);
		}

		@Override
		protected void addUnits() {
			SootMethod sm = Scene.v().getMethod("<java.util.ArrayList: void <init>()>");
			
			//Jimple.v().newNewExpr(RefType.v("java.util.ArrayList"));
			addAssignStmt(arrayList, new JNewExpr(RefType.v("java.util.ArrayList")));
			//addIdentityStmt(arrayList, new ThisRef(RefType.v("java.util.ArrayList")));
			addInvokeStmt(Jimple.v().newSpecialInvokeExpr(arrayList, sm.makeRef()));
			addAssignStmt(Jimple.v().newStaticFieldRef(events_field.makeRef()), arrayList);
			addReturnVoidStmt();
		}

		@Override
		protected void addLocals() {
			arrayList = addLocal("arrayList", RefType.v("java.util.ArrayList"));
		}

		@Override
		protected void newMethodName() {
			method = new SootMethod("<clinit>", EmptyTypes(), VoidType.v(),Modifier.STATIC);
		}
	}

	
}