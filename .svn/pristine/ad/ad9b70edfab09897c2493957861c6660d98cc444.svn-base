abstract class cz.romario.opensudoku.gui.Timer extends android.os.Handler
{
    private long mAccumTime;
    private boolean mIsRunning;
    private long mLastLogTime;
    private long mNextTime;
    private int mTickCount;
    private long mTickInterval;
    private final java.lang.Runnable runner;

    public void <init>(long)
    {
        cz.romario.opensudoku.gui.Timer $r0;
        long $l0;
        cz.romario.opensudoku.gui.Timer$1 $r1;

        $r0 := @this: cz.romario.opensudoku.gui.Timer;
        $l0 := @parameter0: long;
        specialinvoke $r0.<android.os.Handler: void <init>()>();
        $r1 = new cz.romario.opensudoku.gui.Timer$1;
        specialinvoke $r1.<cz.romario.opensudoku.gui.Timer$1: void <init>(cz.romario.opensudoku.gui.Timer)>($r0);
        $r0.<cz.romario.opensudoku.gui.Timer: java.lang.Runnable runner> = $r1;
        $r0.<cz.romario.opensudoku.gui.Timer: long mTickInterval> = 0L;
        $r0.<cz.romario.opensudoku.gui.Timer: boolean mIsRunning> = 0;
        $r0.<cz.romario.opensudoku.gui.Timer: long mTickInterval> = $l0;
        $r0.<cz.romario.opensudoku.gui.Timer: boolean mIsRunning> = 0;
        $r0.<cz.romario.opensudoku.gui.Timer: long mAccumTime> = 0L;
        return;
    }

    static boolean access$0(cz.romario.opensudoku.gui.Timer)
    {
        cz.romario.opensudoku.gui.Timer $r0;
        boolean $z0;

        $r0 := @parameter0: cz.romario.opensudoku.gui.Timer;
        $z0 = $r0.<cz.romario.opensudoku.gui.Timer: boolean mIsRunning>;
        return $z0;
    }

    static long access$1(cz.romario.opensudoku.gui.Timer)
    {
        cz.romario.opensudoku.gui.Timer $r0;
        long $l0;

        $r0 := @parameter0: cz.romario.opensudoku.gui.Timer;
        $l0 = $r0.<cz.romario.opensudoku.gui.Timer: long mAccumTime>;
        return $l0;
    }

    static java.lang.Runnable access$10(cz.romario.opensudoku.gui.Timer)
    {
        cz.romario.opensudoku.gui.Timer $r0;
        java.lang.Runnable $r1;

        $r0 := @parameter0: cz.romario.opensudoku.gui.Timer;
        $r1 = $r0.<cz.romario.opensudoku.gui.Timer: java.lang.Runnable runner>;
        return $r1;
    }

    static void access$11(cz.romario.opensudoku.gui.Timer, boolean)
    {
        cz.romario.opensudoku.gui.Timer $r0;
        boolean $z0;

        $r0 := @parameter0: cz.romario.opensudoku.gui.Timer;
        $z0 := @parameter1: boolean;
        $r0.<cz.romario.opensudoku.gui.Timer: boolean mIsRunning> = $z0;
        return;
    }

    static long access$2(cz.romario.opensudoku.gui.Timer)
    {
        cz.romario.opensudoku.gui.Timer $r0;
        long $l0;

        $r0 := @parameter0: cz.romario.opensudoku.gui.Timer;
        $l0 = $r0.<cz.romario.opensudoku.gui.Timer: long mLastLogTime>;
        return $l0;
    }

    static void access$3(cz.romario.opensudoku.gui.Timer, long)
    {
        cz.romario.opensudoku.gui.Timer $r0;
        long $l0;

        $r0 := @parameter0: cz.romario.opensudoku.gui.Timer;
        $l0 := @parameter1: long;
        $r0.<cz.romario.opensudoku.gui.Timer: long mAccumTime> = $l0;
        return;
    }

    static void access$4(cz.romario.opensudoku.gui.Timer, long)
    {
        cz.romario.opensudoku.gui.Timer $r0;
        long $l0;

        $r0 := @parameter0: cz.romario.opensudoku.gui.Timer;
        $l0 := @parameter1: long;
        $r0.<cz.romario.opensudoku.gui.Timer: long mLastLogTime> = $l0;
        return;
    }

    static int access$5(cz.romario.opensudoku.gui.Timer)
    {
        cz.romario.opensudoku.gui.Timer $r0;
        int $i0;

        $r0 := @parameter0: cz.romario.opensudoku.gui.Timer;
        $i0 = $r0.<cz.romario.opensudoku.gui.Timer: int mTickCount>;
        return $i0;
    }

    static void access$6(cz.romario.opensudoku.gui.Timer, int)
    {
        cz.romario.opensudoku.gui.Timer $r0;
        int $i0;

        $r0 := @parameter0: cz.romario.opensudoku.gui.Timer;
        $i0 := @parameter1: int;
        $r0.<cz.romario.opensudoku.gui.Timer: int mTickCount> = $i0;
        return;
    }

    static long access$7(cz.romario.opensudoku.gui.Timer)
    {
        cz.romario.opensudoku.gui.Timer $r0;
        long $l0;

        $r0 := @parameter0: cz.romario.opensudoku.gui.Timer;
        $l0 = $r0.<cz.romario.opensudoku.gui.Timer: long mNextTime>;
        return $l0;
    }

    static long access$8(cz.romario.opensudoku.gui.Timer)
    {
        cz.romario.opensudoku.gui.Timer $r0;
        long $l0;

        $r0 := @parameter0: cz.romario.opensudoku.gui.Timer;
        $l0 = $r0.<cz.romario.opensudoku.gui.Timer: long mTickInterval>;
        return $l0;
    }

    static void access$9(cz.romario.opensudoku.gui.Timer, long)
    {
        cz.romario.opensudoku.gui.Timer $r0;
        long $l0;

        $r0 := @parameter0: cz.romario.opensudoku.gui.Timer;
        $l0 := @parameter1: long;
        $r0.<cz.romario.opensudoku.gui.Timer: long mNextTime> = $l0;
        return;
    }

    protected void done()
    {
        cz.romario.opensudoku.gui.Timer $r0;

        $r0 := @this: cz.romario.opensudoku.gui.Timer;
        return;
    }

    public final long getTime()
    {
        cz.romario.opensudoku.gui.Timer $r0;
        long $l0;

        $r0 := @this: cz.romario.opensudoku.gui.Timer;
        $l0 = $r0.<cz.romario.opensudoku.gui.Timer: long mAccumTime>;
        return $l0;
    }

    public final boolean isRunning()
    {
        cz.romario.opensudoku.gui.Timer $r0;
        boolean $z0;

        $r0 := @this: cz.romario.opensudoku.gui.Timer;
        $z0 = $r0.<cz.romario.opensudoku.gui.Timer: boolean mIsRunning>;
        return $z0;
    }

    public final void reset()
    {
        cz.romario.opensudoku.gui.Timer $r0;

        $r0 := @this: cz.romario.opensudoku.gui.Timer;
        virtualinvoke $r0.<cz.romario.opensudoku.gui.Timer: void stop()>();
        $r0.<cz.romario.opensudoku.gui.Timer: int mTickCount> = 0;
        $r0.<cz.romario.opensudoku.gui.Timer: long mAccumTime> = 0L;
        return;
    }

    boolean restoreState(android.os.Bundle)
    {
        cz.romario.opensudoku.gui.Timer $r0;
        android.os.Bundle $r1;
        boolean $z0;

        $r0 := @this: cz.romario.opensudoku.gui.Timer;
        $r1 := @parameter0: android.os.Bundle;
        $z0 = virtualinvoke $r0.<cz.romario.opensudoku.gui.Timer: boolean restoreState(android.os.Bundle,boolean)>($r1, 1);
        return $z0;
    }

    boolean restoreState(android.os.Bundle, boolean)
    {
        cz.romario.opensudoku.gui.Timer $r0;
        android.os.Bundle $r1;
        boolean $z0, $z1;
        long $l0;
        int $i1;

        $r0 := @this: cz.romario.opensudoku.gui.Timer;
        $r1 := @parameter0: android.os.Bundle;
        $z0 := @parameter1: boolean;
        $l0 = virtualinvoke $r1.<android.os.Bundle: long getLong(java.lang.String)>("tickInterval");
        $r0.<cz.romario.opensudoku.gui.Timer: long mTickInterval> = $l0;
        $z1 = virtualinvoke $r1.<android.os.Bundle: boolean getBoolean(java.lang.String)>("isRunning");
        $r0.<cz.romario.opensudoku.gui.Timer: boolean mIsRunning> = $z1;
        $i1 = virtualinvoke $r1.<android.os.Bundle: int getInt(java.lang.String)>("tickCount");
        $r0.<cz.romario.opensudoku.gui.Timer: int mTickCount> = $i1;
        $l0 = virtualinvoke $r1.<android.os.Bundle: long getLong(java.lang.String)>("accumTime");
        $r0.<cz.romario.opensudoku.gui.Timer: long mAccumTime> = $l0;
        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();
        $r0.<cz.romario.opensudoku.gui.Timer: long mLastLogTime> = $l0;
        $z1 = $r0.<cz.romario.opensudoku.gui.Timer: boolean mIsRunning>;
        if $z1 == 0 goto label0;

        if $z0 == 0 goto label1;

        virtualinvoke $r0.<cz.romario.opensudoku.gui.Timer: void start()>();

     label0:
        return 1;

     label1:
        $r0.<cz.romario.opensudoku.gui.Timer: boolean mIsRunning> = 0;
        goto label0;
    }

    void saveState(android.os.Bundle)
    {
        cz.romario.opensudoku.gui.Timer $r0;
        android.os.Bundle $r1;
        long $l0, $l1, $l2;
        boolean $z0;
        int $i3;

        $r0 := @this: cz.romario.opensudoku.gui.Timer;
        $r1 := @parameter0: android.os.Bundle;
        $z0 = $r0.<cz.romario.opensudoku.gui.Timer: boolean mIsRunning>;
        if $z0 == 0 goto label0;

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();
        $l2 = $r0.<cz.romario.opensudoku.gui.Timer: long mAccumTime>;
        $l1 = $r0.<cz.romario.opensudoku.gui.Timer: long mLastLogTime>;
        $l1 = $l0 - $l1;
        $l2 = $l2 + $l1;
        $r0.<cz.romario.opensudoku.gui.Timer: long mAccumTime> = $l2;
        $r0.<cz.romario.opensudoku.gui.Timer: long mLastLogTime> = $l0;

     label0:
        $l0 = $r0.<cz.romario.opensudoku.gui.Timer: long mTickInterval>;
        virtualinvoke $r1.<android.os.Bundle: void putLong(java.lang.String,long)>("tickInterval", $l0);
        $z0 = $r0.<cz.romario.opensudoku.gui.Timer: boolean mIsRunning>;
        virtualinvoke $r1.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("isRunning", $z0);
        $i3 = $r0.<cz.romario.opensudoku.gui.Timer: int mTickCount>;
        virtualinvoke $r1.<android.os.Bundle: void putInt(java.lang.String,int)>("tickCount", $i3);
        $l2 = $r0.<cz.romario.opensudoku.gui.Timer: long mAccumTime>;
        virtualinvoke $r1.<android.os.Bundle: void putLong(java.lang.String,long)>("accumTime", $l2);
        return;
    }

    public void start()
    {
        cz.romario.opensudoku.gui.Timer $r0;
        long $l0;
        boolean $z0;
        java.lang.Runnable $r1;

        $r0 := @this: cz.romario.opensudoku.gui.Timer;
        $z0 = $r0.<cz.romario.opensudoku.gui.Timer: boolean mIsRunning>;
        if $z0 == 0 goto label1;

     label0:
        return;

     label1:
        $r0.<cz.romario.opensudoku.gui.Timer: boolean mIsRunning> = 1;
        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();
        $r0.<cz.romario.opensudoku.gui.Timer: long mLastLogTime> = $l0;
        $r0.<cz.romario.opensudoku.gui.Timer: long mNextTime> = $l0;
        $r1 = $r0.<cz.romario.opensudoku.gui.Timer: java.lang.Runnable runner>;
        $l0 = $r0.<cz.romario.opensudoku.gui.Timer: long mNextTime>;
        virtualinvoke $r0.<cz.romario.opensudoku.gui.Timer: boolean postAtTime(java.lang.Runnable,long)>($r1, $l0);
        goto label0;
    }

    protected abstract boolean step(int, long);

    public void stop()
    {
        cz.romario.opensudoku.gui.Timer $r0;
        long $l0, $l1, $l2;
        boolean $z0;

        $r0 := @this: cz.romario.opensudoku.gui.Timer;
        $z0 = $r0.<cz.romario.opensudoku.gui.Timer: boolean mIsRunning>;
        if $z0 == 0 goto label0;

        $r0.<cz.romario.opensudoku.gui.Timer: boolean mIsRunning> = 0;
        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();
        $l2 = $r0.<cz.romario.opensudoku.gui.Timer: long mAccumTime>;
        $l1 = $r0.<cz.romario.opensudoku.gui.Timer: long mLastLogTime>;
        $l1 = $l0 - $l1;
        $l2 = $l2 + $l1;
        $r0.<cz.romario.opensudoku.gui.Timer: long mAccumTime> = $l2;
        $r0.<cz.romario.opensudoku.gui.Timer: long mLastLogTime> = $l0;

     label0:
        return;
    }
}
