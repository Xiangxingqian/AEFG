//package com.app.test.newClass;
//import java.util.ArrayList;
//import java.util.List;
//
//import soot.Body;
//import soot.Local;
//import soot.Modifier;
//import soot.RefType;
//import soot.Scene;
//import soot.SootClass;
//import soot.SootField;
//import soot.SootMethod;
//import soot.Type;
//import soot.Unit;
//import soot.VoidType;
//import soot.jimple.Jimple;
//import soot.jimple.JimpleBody;
//import soot.jimple.ParameterRef;
//import soot.jimple.ThisRef;
//import soot.jimple.internal.JInstanceFieldRef;
//import soot.util.Chain;
//
//public class Triple {
//	
//	public static final String CLASS_STRING = "Triples";
//	final RefType CLASS_TYPE = RefType.v("java.lang.Class");
//	final RefType OBJECT_TYPE = RefType.v("java.lang.Object");
//	final RefType VIEW_TYPE = RefType.v("android.view.View");
//	final RefType CLASSNAME_TYPE = RefType.v(CLASS_STRING);
//	
//	SootField class_field = new SootField("c", CLASS_TYPE);
//	SootField object_field = new SootField("o", OBJECT_TYPE);
//	SootField view_field = new SootField("v", VIEW_TYPE);
//	
//	public SootClass createTriples(){
//		SootClass sClass = new SootClass(CLASS_STRING, Modifier.PUBLIC);
//		sClass.setSuperclass(Scene.v().getSootClass("java.lang.Object"));
//		Scene.v().addClass(sClass);
//		
//		sClass.addField(class_field);
//		sClass.addField(view_field);
//		sClass.addField(object_field);
//		
//		List<Type> types = new ArrayList<Type>();
//		types.add(CLASS_TYPE);
//		types.add(VIEW_TYPE);
//		types.add(OBJECT_TYPE);
//		
//		SootMethod sm = new SootMethod("<init>",types,VoidType.v(),Modifier.PUBLIC);
//		SootMethod getC = new SootMethod("getC", new ArrayList(),CLASS_TYPE,Modifier.PUBLIC);
//		SootMethod getO = new SootMethod("getO", new ArrayList(),OBJECT_TYPE,Modifier.PUBLIC);
//		SootMethod getV = new SootMethod("getV", new ArrayList(),VIEW_TYPE,Modifier.PUBLIC);
//		
//		sClass.addMethod(sm);
//		sClass.addMethod(getV);
//		sClass.addMethod(getC);
//		sClass.addMethod(getO);
//		buildInitMethod(sm);
//		buildGetMethod(getC, CLASS_TYPE);
//		buildGetMethod(getO, OBJECT_TYPE);
//		buildGetMethod(getV, VIEW_TYPE);
//		
//		sClass.setApplicationClass();
//		return sClass;
//	}
//	
//	public void buildInitMethod(SootMethod sm){
//		JimpleBody body = Jimple.v().newBody(sm);
//		sm.setActiveBody(body);
//		Chain<Unit> units = body.getUnits();
//		Local t,c,v,o;
//		
//		//SootMethod method = Scene.v().getMethod("<java.lang.Object: void <init>()>");
//		SootClass sootClass = Scene.v().getSootClass("java.lang.Object");
//		SootMethod method = sootClass.getMethod("void <init>()");
//		
//		t = addLocal(body, "t", RefType.v(CLASS_STRING));
//		c = addLocal(body, "c", CLASS_TYPE);
//		v = addLocal(body, "v", VIEW_TYPE);
//		o = addLocal(body, "o", OBJECT_TYPE);
//		
//		units.add(Jimple.v().newIdentityStmt(t, new ThisRef(CLASSNAME_TYPE)));
//		units.add(Jimple.v().newIdentityStmt(c, new ParameterRef(CLASS_TYPE,0)));
//		units.add(Jimple.v().newIdentityStmt(v, new ParameterRef(VIEW_TYPE,1)));
//		units.add(Jimple.v().newIdentityStmt(o, new ParameterRef(OBJECT_TYPE,2)));
//		
//		units.add(Jimple.v().newInvokeStmt(
//				Jimple.v().newSpecialInvokeExpr(t, method.makeRef())));
//		
//		units.add(Jimple.v().newAssignStmt(
//				new JInstanceFieldRef(t, class_field.makeRef()), c));
//		units.add(Jimple.v().newAssignStmt(
//				new JInstanceFieldRef(t, view_field.makeRef()), v));
//		units.add(Jimple.v().newAssignStmt(
//				new JInstanceFieldRef(t, object_field.makeRef()), o));
//		units.add(Jimple.v().newReturnVoidStmt());
//	}
//	
//	public void buildGetMethod(SootMethod sm, RefType refType){
//		JimpleBody body = Jimple.v().newBody(sm);
//		sm.setActiveBody(body);
//		Chain<Unit> units = body.getUnits();
//		Local base,type;
//		
//		base = addLocal(body, "base", RefType.v(CLASS_STRING));
//		type = addLocal(body, "type", refType);
//		
//		units.add(Jimple.v().newIdentityStmt(base, new ThisRef(CLASSNAME_TYPE)));
//		units.add(Jimple.v().newAssignStmt(
//				type,new JInstanceFieldRef(base, class_field.makeRef())));
//		units.add(Jimple.v().newReturnStmt(type));
//	}
//	
//	public Local addLocal(Body body,String name,RefType refType){
//		Local newLocal = Jimple.v().newLocal(name, refType);
//		body.getLocals().add(newLocal);
//		return newLocal;
//	}
//}
