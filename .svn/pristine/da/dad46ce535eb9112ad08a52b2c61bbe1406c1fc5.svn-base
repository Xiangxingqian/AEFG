public class android.support.v4.util.AtomicFile extends java.lang.Object
{
    private final java.io.File mBackupName;
    private final java.io.File mBaseName;

    public void <init>(java.io.File)
    {
        android.support.v4.util.AtomicFile $r0;
        java.io.File $r1, $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        $r0 := @this: android.support.v4.util.AtomicFile;
        $r1 := @parameter0: java.io.File;
        specialinvoke $r0.<java.lang.Object: void <init>()>();
        $r0.<android.support.v4.util.AtomicFile: java.io.File mBaseName> = $r1;
        $r2 = new java.io.File;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r1.<java.io.File: java.lang.String getPath()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".bak");
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r4);
        $r0.<android.support.v4.util.AtomicFile: java.io.File mBackupName> = $r2;
        return;
    }

    static boolean sync(java.io.FileOutputStream)
    {
        java.io.FileOutputStream $r0;
        java.io.FileDescriptor $r1;
        java.io.IOException $r2;

        $r0 := @parameter0: java.io.FileOutputStream;
        if $r0 == null goto label1;

     label0:
        $r1 = virtualinvoke $r0.<java.io.FileOutputStream: java.io.FileDescriptor getFD()>();
        virtualinvoke $r1.<java.io.FileDescriptor: void sync()>();

     label1:
        return 1;

     label2:
        $r2 := @caughtexception;
        return 0;

        catch java.io.IOException from label0 to label1 with label2;
    }

    public void delete()
    {
        android.support.v4.util.AtomicFile $r0;
        java.io.File $r1;

        $r0 := @this: android.support.v4.util.AtomicFile;
        $r1 = $r0.<android.support.v4.util.AtomicFile: java.io.File mBaseName>;
        virtualinvoke $r1.<java.io.File: boolean delete()>();
        $r1 = $r0.<android.support.v4.util.AtomicFile: java.io.File mBackupName>;
        virtualinvoke $r1.<java.io.File: boolean delete()>();
        return;
    }

    public void failWrite(java.io.FileOutputStream)
    {
        android.support.v4.util.AtomicFile $r0;
        java.io.FileOutputStream $r1;
        java.io.IOException $r2;
        java.io.File $r3, $r4;

        $r0 := @this: android.support.v4.util.AtomicFile;
        $r1 := @parameter0: java.io.FileOutputStream;
        if $r1 == null goto label1;

        staticinvoke <android.support.v4.util.AtomicFile: boolean sync(java.io.FileOutputStream)>($r1);

     label0:
        virtualinvoke $r1.<java.io.FileOutputStream: void close()>();
        $r3 = $r0.<android.support.v4.util.AtomicFile: java.io.File mBaseName>;
        virtualinvoke $r3.<java.io.File: boolean delete()>();
        $r4 = $r0.<android.support.v4.util.AtomicFile: java.io.File mBackupName>;
        $r3 = $r0.<android.support.v4.util.AtomicFile: java.io.File mBaseName>;
        virtualinvoke $r4.<java.io.File: boolean renameTo(java.io.File)>($r3);

     label1:
        return;

     label2:
        $r2 := @caughtexception;
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("AtomicFile", "failWrite: Got exception:", $r2);
        goto label1;

        catch java.io.IOException from label0 to label1 with label2;
    }

    public void finishWrite(java.io.FileOutputStream)
    {
        android.support.v4.util.AtomicFile $r0;
        java.io.FileOutputStream $r1;
        java.io.IOException $r2;
        java.io.File $r3;

        $r0 := @this: android.support.v4.util.AtomicFile;
        $r1 := @parameter0: java.io.FileOutputStream;
        if $r1 == null goto label1;

        staticinvoke <android.support.v4.util.AtomicFile: boolean sync(java.io.FileOutputStream)>($r1);

     label0:
        virtualinvoke $r1.<java.io.FileOutputStream: void close()>();
        $r3 = $r0.<android.support.v4.util.AtomicFile: java.io.File mBackupName>;
        virtualinvoke $r3.<java.io.File: boolean delete()>();

     label1:
        return;

     label2:
        $r2 := @caughtexception;
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("AtomicFile", "finishWrite: Got exception:", $r2);
        goto label1;

        catch java.io.IOException from label0 to label1 with label2;
    }

    public java.io.File getBaseFile()
    {
        android.support.v4.util.AtomicFile $r0;
        java.io.File $r1;

        $r0 := @this: android.support.v4.util.AtomicFile;
        $r1 = $r0.<android.support.v4.util.AtomicFile: java.io.File mBaseName>;
        return $r1;
    }

    public java.io.FileInputStream openRead() throws java.io.FileNotFoundException
    {
        android.support.v4.util.AtomicFile $r0;
        java.io.File $r1, $r2;
        boolean $z0;
        java.io.FileInputStream $r3;

        $r0 := @this: android.support.v4.util.AtomicFile;
        $r1 = $r0.<android.support.v4.util.AtomicFile: java.io.File mBackupName>;
        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();
        if $z0 == 0 goto label0;

        $r1 = $r0.<android.support.v4.util.AtomicFile: java.io.File mBaseName>;
        virtualinvoke $r1.<java.io.File: boolean delete()>();
        $r2 = $r0.<android.support.v4.util.AtomicFile: java.io.File mBackupName>;
        $r1 = $r0.<android.support.v4.util.AtomicFile: java.io.File mBaseName>;
        virtualinvoke $r2.<java.io.File: boolean renameTo(java.io.File)>($r1);

     label0:
        $r3 = new java.io.FileInputStream;
        $r2 = $r0.<android.support.v4.util.AtomicFile: java.io.File mBaseName>;
        specialinvoke $r3.<java.io.FileInputStream: void <init>(java.io.File)>($r2);
        return $r3;
    }

    public byte[] readFully() throws java.io.IOException
    {
        android.support.v4.util.AtomicFile $r0;
        int $i0, $i1, $i3;
        byte[] $r1, $r2;
        java.io.FileInputStream $r3;
        java.lang.Throwable $r4;

        $r0 := @this: android.support.v4.util.AtomicFile;
        $r3 = virtualinvoke $r0.<android.support.v4.util.AtomicFile: java.io.FileInputStream openRead()>();
        $i1 = 0;

     label0:
        $i0 = virtualinvoke $r3.<java.io.FileInputStream: int available()>();
        $r1 = newarray (byte)[$i0];

     label1:
        $i0 = lengthof $r1;
        $i0 = $i0 - $i1;
        $i0 = virtualinvoke $r3.<java.io.FileInputStream: int read(byte[],int,int)>($r1, $i1, $i0);

     label2:
        if $i0 > 0 goto label3;

        virtualinvoke $r3.<java.io.FileInputStream: void close()>();
        return $r1;

     label3:
        $i1 = $i1 + $i0;

     label4:
        $i0 = virtualinvoke $r3.<java.io.FileInputStream: int available()>();
        $i3 = lengthof $r1;
        $i3 = $i3 - $i1;
        if $i0 <= $i3 goto label1;

        $i3 = $i1 + $i0;
        $r2 = newarray (byte)[$i3];
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, 0, $i1);

     label5:
        $r1 = $r2;
        goto label1;

     label6:
        $r4 := @caughtexception;
        virtualinvoke $r3.<java.io.FileInputStream: void close()>();
        throw $r4;

        catch java.lang.Throwable from label0 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public java.io.FileOutputStream startWrite() throws java.io.IOException
    {
        android.support.v4.util.AtomicFile $r0;
        java.io.FileNotFoundException $r1, $r2;
        java.io.File $r3, $r6;
        java.io.FileOutputStream $r4;
        java.lang.String $r5, $r7;
        boolean $z0;
        java.lang.StringBuilder $r8;
        java.io.IOException $r9;

        $r0 := @this: android.support.v4.util.AtomicFile;
        $r3 = $r0.<android.support.v4.util.AtomicFile: java.io.File mBaseName>;
        $z0 = virtualinvoke $r3.<java.io.File: boolean exists()>();
        if $z0 == 0 goto label0;

        $r3 = $r0.<android.support.v4.util.AtomicFile: java.io.File mBackupName>;
        $z0 = virtualinvoke $r3.<java.io.File: boolean exists()>();
        if $z0 != 0 goto label3;

        $r6 = $r0.<android.support.v4.util.AtomicFile: java.io.File mBaseName>;
        $r3 = $r0.<android.support.v4.util.AtomicFile: java.io.File mBackupName>;
        $z0 = virtualinvoke $r6.<java.io.File: boolean renameTo(java.io.File)>($r3);
        if $z0 != 0 goto label0;

        $r8 = new java.lang.StringBuilder;
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();
        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t rename file ");
        $r6 = $r0.<android.support.v4.util.AtomicFile: java.io.File mBaseName>;
        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);
        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to backup file ");
        $r6 = $r0.<android.support.v4.util.AtomicFile: java.io.File mBackupName>;
        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);
        $r5 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AtomicFile", $r5);

     label0:
        $r4 = new java.io.FileOutputStream;
        $r6 = $r0.<android.support.v4.util.AtomicFile: java.io.File mBaseName>;

     label1:
        specialinvoke $r4.<java.io.FileOutputStream: void <init>(java.io.File)>($r6);

     label2:
        return $r4;

     label3:
        $r6 = $r0.<android.support.v4.util.AtomicFile: java.io.File mBaseName>;
        virtualinvoke $r6.<java.io.File: boolean delete()>();
        goto label0;

     label4:
        $r1 := @caughtexception;
        $r6 = $r0.<android.support.v4.util.AtomicFile: java.io.File mBaseName>;
        $r3 = virtualinvoke $r6.<java.io.File: java.io.File getParentFile()>();
        $z0 = virtualinvoke $r3.<java.io.File: boolean mkdir()>();
        if $z0 != 0 goto label5;

        $r9 = new java.io.IOException;
        $r8 = new java.lang.StringBuilder;
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();
        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t create directory ");
        $r6 = $r0.<android.support.v4.util.AtomicFile: java.io.File mBaseName>;
        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);
        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>($r7);
        throw $r9;

     label5:
        $r4 = new java.io.FileOutputStream;
        $r6 = $r0.<android.support.v4.util.AtomicFile: java.io.File mBaseName>;

     label6:
        specialinvoke $r4.<java.io.FileOutputStream: void <init>(java.io.File)>($r6);

     label7:
        return $r4;

     label8:
        $r2 := @caughtexception;
        $r9 = new java.io.IOException;
        $r8 = new java.lang.StringBuilder;
        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();
        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t create ");
        $r6 = $r0.<android.support.v4.util.AtomicFile: java.io.File mBaseName>;
        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);
        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>($r7);
        throw $r9;

        catch java.io.FileNotFoundException from label1 to label2 with label4;
        catch java.io.FileNotFoundException from label6 to label7 with label8;
    }
}
